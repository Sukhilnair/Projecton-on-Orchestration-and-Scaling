pipeline {
    agent any

    environment {
        GIT_REPO = "https://github.com/Sukhilnair/Projecton-on-Orchestration-and-Scaling.git"
        ECR_REPO_URI = 'public.ecr.aws/b4e0x1f6'
        AWS_REGION = 'us-east-1'
        AWS_CREDENTIALS_ID = 'aws-credentials'
        CLUSTER_NAME = 'sukhil-cluster'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${env.GIT_REPO}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${env.ECR_REPO_URI}/sukhil/mern:latest ."
                }
            }
        }

        stage('Login to ECR') {
            steps {
                withCredentials([aws(credentialsId: env.AWS_CREDENTIALS_ID)]) {
                    script {
                        // Use AWS CLI to log in to ECR Public
                        sh """
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region ${env.AWS_REGION}
                            aws ecr-public get-login-password --region ${env.AWS_REGION} | docker login --username AWS --password-stdin ${env.ECR_REPO_URI}
                        """
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${env.ECR_REPO_URI}/sukhil/mern:latest"
                }
            }
        }

        stage('Check / Create EKS Cluster') {
            steps {
                withCredentials([aws(credentialsId: env.AWS_CREDENTIALS_ID)]) {
                    script {
                        sh """
                            if ! eksctl get cluster --name ${env.CLUSTER_NAME} --region ${env.AWS_REGION}; then
                                eksctl create cluster --name ${env.CLUSTER_NAME} --region ${env.AWS_REGION} --nodegroup-name standard-workers --node-type t3.medium --nodes 1 --nodes-min 1 --nodes-max 3 --managed
                            fi
                        """
                    }
                }
            }
        }

        stage('Deploy Application with Helm') {
            steps {
                withCredentials([aws(credentialsId: env.AWS_CREDENTIALS_ID)]) {
                    script {
                        sh """
                            aws eks --region ${env.AWS_REGION} update-kubeconfig --name ${env.CLUSTER_NAME}
                            helm repo add stable https://charts.helm.sh/stable
                            helm repo update
                            helm upgrade --install mern-app ./mernAPP --set helloService.image=${env.ECR_REPO_URI}/sukhil/mern,image.tag=latest --set profileService.image=${env.ECR_REPO_URI}/sukhil/mern,image.tag=latest --set frontend.image=${env.ECR_REPO_URI}/sukhil/mern,image.tag=latest
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -af'
        }
    }
}
